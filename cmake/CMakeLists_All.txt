cmake_minimum_required(VERSION 3.1.0)

find_package(GTest 1.10.0 CONFIG REQUIRED)

if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
  find_program(GCOV ${CMAKE_LIBRARY_ARCHITECTURE}-gcov)
  find_program(LCOV lcov)
  find_program(GENH genhtml)

  if(GCOV AND LCOV AND GENH)
    set(COVERAGE "-coverage")
    add_custom_target(coverage
      COMMAND ${LCOV} -c -d '.' -o 'info'
      COMMAND ${LCOV} -e 'info' '*/example/*' -o 'info'
      COMMAND ${LCOV} -r 'info' '*/test/*' -o 'info'
      COMMAND ${GENH} 'info' -o 'coverage' --filter branch)
  endif()
endif()

function(create_test name)
  add_executable(${name} ${name}.cpp ${PROD_SRC})
  target_include_directories(${name} PRIVATE ${CMAKE_SOURCE_DIR}/include)
  target_link_libraries(${name} PRIVATE GTest::gtest GTest::gmock)
  target_compile_options(${name} PRIVATE
    $<$<COMPILE_LANG_AND_ID:CXX,GNU>:-fsanitize=address ${COVERAGE}>
    $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/fsanitize=address>)
  target_link_options(${name} PRIVATE
    $<$<LINK_LANG_AND_ID:CXX,GNU>:-fsanitize=address ${COVERAGE}>
    $<$<LINK_LANG_AND_ID:CXX,MSVC>:/incremental:no>)

  if(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_test(NAME ${name} COMMAND "$<TARGET_FILE:${name}>")
  elseif(CMAKE_CXX_COMPILER_ID MATCHES GNU AND CMAKE_CROSSCOMPILING)
    add_test(NAME ${name} COMMAND
      env ASAN_OPTIONS=detect_leaks=0
      ${CMAKE_CROSSCOMPILING_EMULATOR} -L ${CMAKE_FIND_ROOT_PATH} "$<TARGET_FILE:${name}>")
  endif()
  #add_test(NAME ${name} COMMAND $<$<BOOL:${CMAKE_CROSSCOMPILING}>:"env ASAN_OPTIONS=detect_leaks=0 ${CMAKE_CROSSCOMPILING_EMULATOR} -L ${CMAKE_FIND_ROOT_PATH} $<TARGET_FILE:${name}>">$<$<NOT:$<BOOL:${CMAKE_CROSSCOMPILING}>>:$<TARGET_FILE:${name}>>)
endfunction()

list(REMOVE_ITEM PROD_SRC ${CMAKE_SOURCE_DIR}/src/main.cpp)
create_test(gtest_ex1)
create_test(gtest_ex2)
create_test(gtest_ex3)

if(TRUE)
function(create_leak_test name)
  set(name_leak "${name}_leak")
  add_executable(${name_leak} ${name}.cpp ${PROD_SRC})
  target_include_directories(${name_leak} PRIVATE
    $<$<COMPILE_LANG_AND_ID:CXX,GNU>:${CMAKE_SOURCE_DIR}/include>
    $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:${CMAKE_SOURCE_DIR}/include "C:/Program Files (x86)/Visual Leak Detector/include">)
  #target_link_libraries(${name_leak} PRIVATE GTest::gtest GTest::gmock libtcmalloc.a)
  target_link_libraries(${name_leak} PRIVATE GTest::gtest GTest::gmock
    $<$<LINK_LANG_AND_ID:CXX,GNU>:tcmalloc>
    $<$<LINK_LANG_AND_ID:CXX,MSVC>:"C:/Program Files (x86)/Visual Leak Detector/lib/Win64/vld.lib">)

  if(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_test(NAME ${name_leak} COMMAND "$<TARGET_FILE:${name_leak}>")
  elseif(CMAKE_CXX_COMPILER_ID MATCHES GNU AND CMAKE_CROSSCOMPILING)
    add_test(NAME ${name_leak} COMMAND env HEAPCHECK=normal HEAP_CHECK_MAX_LEAKS=0
      PPROF_PATH=${CMAKE_FIND_ROOT_PATH}/bin/pprof
      ${CMAKE_CROSSCOMPILING_EMULATOR} -L ${CMAKE_FIND_ROOT_PATH} "$<TARGET_FILE:${name_leak}>")
  endif()
endfunction()

create_leak_test(gtest_ex1)
create_leak_test(gtest_ex2)
create_leak_test(gtest_ex3)
endif()
